
* tasks:
  * make constants (e.g. bounce duration) tunable with IMGUI in something like constants.edit.h
  * game state animating - block input
  * transactions (can leave till later)


* features
  * game
    * pretty walls/shadows etc
      * shadows from floor to water
    * cards
    * spells
  * library
    * imgui
      * display log
    * input
    * random numbers
    * math functions
    * dll reloading - don't reload if compile unsuccessful (i.e. don't write "written_library" in that case)
    * memory functions/context
    * global context/global error message
    * global context
        * thread local global context
    * strings

* bugs
  * events not sent if mouse leaves window - need to turn off map dragging mode when re-entering the
    window
  * pixel art upsampler handle fractional input_size/input_offsets


* decision
  * characters/items/tiles to be rendered pixel perfect (tile shader)
  * do mouse picking/outlining using this pixel perfect texture
  * effects/cards should use the fancier shader (sprite shader)

* sprite rendering (effects/cards)
  * tiles to be rendered with parameters:
    * horiz stretch
    * vertical stretch
    * rotation
    to be applied stretches first
  * correct pixel sampling (i.e. blend when a pixel overlaps edge of samples)
  * generate anisotropic mips (?)

* create a proper windows game loop
  * make jfg/input.h to convert input from windows to custom input format
    * read input from windows message loop and translate it to sensibly buffered input

* create xinput loading lib

* create IMgui slider adjustments and "constants" files
* create header files with game data (e.g. game images, maps of those images etc) - using python scripts
    * put these in gen/
    * includes:
        * <name>.data.h (shaders, textures, etc)
        * <name>.edit.h (constants for animations etc)
          in game editor should edit <name>.edit.h files

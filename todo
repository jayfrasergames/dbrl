* tasks:
  * variable move duration depending on user input frequency
    * animation "speeding up" when moves made rapidly
  * improve imgui
    * snprintf replacement
    * global context
    * debug imgui global context
    * member functions
  * card user interface
    * card discarding
  * hide mouse/use custom mouse cursor
  * hold tab to view entity health
  * sound
    * playing the same sound more than once simultaneously
  * transaction processing
    * only collapse "Entity_Damage" events after processing transactions

* scenarios:
  * invisible wall
  * fireball hits barrels, chain reaction
  * enemies
    * lich/skeletons
    * spiders (traps)
  * doors
  * spells/cards
    * magic missile
    * fireball
    * lightning (bounces off walls etc)
    * teleport sphere (chaos sphere?)
    * cloud/grease
    * freeze
    * flesh to stone
    * disease (card can't be discarded)
  * improve anims etc
    * exchange
      * cast sound
      * "particle" effects
    * blink
      * cast sound
      * "particle" effects
    * poison card (take damage, anims etc)
      * card flash
      * sound effect

* features
  * game
    * pretty walls/shadows etc
      * shadows from floor to water
    * cards
    * spells
  * library
    * imgui
      * display log
    * input
    * dll reloading - don't reload if compile unsuccessful (i.e. don't write "written_library" in that case)
    * memory functions/context
    * global context/global error message
    * global context
        * thread local global context
    * strings

* bugs
  * "release" mode compile
  * don't try code reloading during debug pause
  * events not sent if mouse leaves window - need to turn off map dragging mode when re-entering the
    window
  * card renderer to do proper anti aliasing/alpha transparency (also mip mapping)


* decision
  * characters/items/tiles to be rendered pixel perfect (tile shader)
  * do mouse picking/outlining using this pixel perfect texture
  * effects/cards should use the fancier shader (sprite shader)

* sprite rendering (effects/cards)
  * tiles to be rendered with parameters:
    * horiz stretch
    * vertical stretch
    * rotation
    to be applied stretches first
  * correct pixel sampling (i.e. blend when a pixel overlaps edge of samples)
  * generate anisotropic mips (?)

* create a proper windows game loop
  * make jfg/input.h to convert input from windows to custom input format
    * read input from windows message loop and translate it to sensibly buffered input

* create xinput loading lib

* create IMgui slider adjustments and "constants" files
* create header files with game data (e.g. game images, maps of those images etc) - using python scripts
    * put these in gen/
    * includes:
        * <name>.data.h (shaders, textures, etc)
        * <name>.edit.h (constants for animations etc)
          in game editor should edit <name>.edit.h files

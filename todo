* tasks:

  * technical
    * clean up build system
      * cmake
      * precompiled headers
      * get rid of "jfg" submodule (integrate everything into one c++ project)

    * don't precomile HLSL files - compile/recompile them at runtime
    * deprecate use of assets.bin for non-release candidates

    * get stack traces from assertion failures!!!
    * load shaders from text files at run time
    * load sounds from wave files at run time
    * asynchronous sound loading
    * deprecate runner/DLL
    * deprecate use of Python scripts in build system
    * libraries
      * lua
      * dxc
      * something for threading!

    * load image assets from PNGs (does this matter?)

  * physics system
    * debug/create unit tests

  * variable move duration depending on user input frequency
    * animation "speeding up" when moves made rapidly
  * improve imgui
    * global context
    * debug imgui global context
    * member functions
  * card user interface
    * card discarding
  * hide mouse/use custom mouse cursor
  * hold tab to view entity health
  * transaction processing
    * only collapse "Entity_Damage" events after processing transactions
  * "rational" class?

* scenarios:
  * invisible wall
  * fireball hits barrels, chain reaction
  * enemies
    * spiders (traps)
    * some creature with an attack which "pulls" the player towards them (e.g. a frog with a tongue attack)
  * doors
  * spells/cards
    * magic missile
    * fireball
    * lightning (bounces off walls etc)
    * teleport sphere (chaos sphere?)
    * cloud/grease
    * freeze
    * flesh to stone
    * disease (card can't be discarded)
  * improve anims etc
    * exchange
      * cast sound
      * "particle" effects
    * poison card (take damage, anims etc)
      * card flash
      * sound effect

* features
  * game
    * pretty walls/shadows etc
      * shadows from floor to water
    * cards
    * spells
  * library
    * imgui
      * display log
    * input
    * dll reloading - don't reload if compile unsuccessful (i.e. don't write "written_library" in that case)
    * memory functions/context
    * global context/global error message
    * global context
        * thread local global context
    * strings
  * debug draw transparency

* cleanup
  * move to "pure" ECS
  * split into multiple files/move to CMake in the "normal" fashion
  * "stateless" DX11 usage
  * use precompiled header?

* bugs
  * "release" mode compile
  * don't try code reloading during debug pause
  * events not sent if mouse leaves window - need to turn off map dragging mode when re-entering the
    window
  * card renderer to do proper anti aliasing/alpha transparency (also mip mapping)
  * ending turn before card dealt animation finished

* decision
  * characters/items/tiles to be rendered pixel perfect (tile shader)
  * do mouse picking/outlining using this pixel perfect texture
  * effects/cards should use the fancier shader (sprite shader)

* sprite rendering (effects/cards)
  * tiles to be rendered with parameters:
    * horiz stretch
    * vertical stretch
    * rotation
    to be applied stretches first
  * correct pixel sampling (i.e. blend when a pixel overlaps edge of samples)
  * generate anisotropic mips (?)

* create a proper windows game loop
  * make jfg/input.h to convert input from windows to custom input format
    * read input from windows message loop and translate it to sensibly buffered input

* create xinput loading lib
